apply plugin: 'com.android.application'
//apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "coffer.androidjatpack"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android.applicationVariants.all{variant ->
        variant.outputs.all{ output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')){
                def fileName = outputFile.name.replace("app",
                "${defaultConfig.applicationId}_${defaultConfig.versionName}_${releaseTime()}")
                outputFileName = fileName
            }

        }
    }

    // 使用Google的数据绑定库
    dataBinding {
        enabled = true
    }
}

static def releaseTime(){
    return new Date().format("yyyy-MM-dd",TimeZone.getTimeZone("UTC"))
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:multidex:1.0.0'
    annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.supportLibraryVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$rootProject.lifecycleVersion"
    implementation "androidx.navigation:navigation-fragment:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui:$rootProject.navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.work:work-runtime:$rootProject.workVersion"
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation "com.google.guava:guava:$rootProject.guavaVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'

    // Testing dependencies
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"

    debugApi 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseApi 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'

}

task printTest{
    def name = 'coffer'
    println "my name : ${name}"
    println "工程名 ： "+project.name
    println "工程路径 ： "+name.getClass().name

//    def map = ['width':'1080','height':'1920']
//    println map['width']
//    println map.height
//
//    Person p = new Person()
//    p.age = 10
//    logger.info("coffer","age:"+p.age)
//
//    add(1,2)

    // 使用自定义闭包1
//    myEach{
//        it
//    }

    // 使用自定义闭包2
    myEach2{
        k,v ->
            println "${k} is ${v}"
    }

    def date = buildTime()
    println "今天: "+date
}

def buildTime(){
    def formattedDate = new Date().format('yyyymmdd')
    return formattedDate
}


// 使用自定义闭包1
def myEach(closure){
    // 模拟有10个元素开始迭代
    for (int i : 1..10){
        println i
        closure(i)
    }
}

// 使用自定义闭包2
def myEach2(closure){
    def map = ['name':'coffer','age':'26']
    map.each{
        closure(it.key,it.value)
    }
}

def add(int a,int b){
    println "a+b = ${a+b}"
}

class Person{
    public String age
}
